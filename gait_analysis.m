clear, close all;

% Video is 60fps, IMU is 148.148148 fps
 
T = readtable('Normal_10.csv', ...
    'HeaderLines', 214, ...
    'Delimiter', ',' ...
);

imuStartTime = .5;
v = VideoReader('Normal_10_480.mov');
% Align video with IMU data
vidStartTime = imuStartTime + 32.625;
v.CurrentTime = vidStartTime;

videoFramePeriod = 1/v.FrameRate;
% Time vector for the video frames
vidTvec = linspace(0, v.NumFrames*videoFramePeriod, v.NumFrames)';

imuSamplePeriod = .00675;
imuSampleRate = 1/imuSamplePeriod;
imuSamples = rmmissing(T.X_samples__1);
imuDuration = imuSamplePeriod*length(imuSamples);
% Time vector for the IMU samples
imuTvec = linspace(0, length(imuSamples)*imuSamplePeriod, length(imuSamples))';

Fs = imuSampleRate;
Fs = 100;
Nvid = floor(linspace(1, v.NumFrames, v.Duration*Fs)');
Nimu = floor(linspace(1, length(imuSamples), imuDuration*Fs)');
Tvid = linspace(0, v.Duration, v.Duration*Fs)';
Timu = linspace(0, imuDuration, imuDuration*Fs)';
vidVec = [Nvid, Tvid];
imuVec = [Nimu, Timu];

% 1: trunk front
% 2: shank left
% 3: shank right
sensorID = 1;
% 1: accelerometer
% 2: gyroscope
dataToUse = 1;
axisToUse = 'X';
% '2d' or '3d'
plotMode = '2d';

accelID = 'TrignoIMSensor%1$d_Acc%1$d_%2$c_IM__g_';
gyroID = 'TrignoIMSensor%1$d_Gyro%1$d_%2$c_IM__deg_sec_';

gyroY = sprintf(gyroID, sensorID, 'Y');
accelY = sprintf(accelID, sensorID, 'Y');
accelX = sprintf(accelID, sensorID, 'X');

% figure;
% plot(T.X_samples_, T.(sprintf('TrignoIMSensor%1$d_EMG%1$d_IM__Volts_', sensorID))), ...
%     title('EMG');
% 
% figure;
% range = 5000:5150;
% plot3(...
%     T.(sprintf('TrignoIMSensor%1$d_Acc%1$d_X_IM__g_', sensorID))(range), ...
%     T.(sprintf('TrignoIMSensor%1$d_Acc%1$d_Y_IM__g_', sensorID))(range), ...
%     T.(sprintf('TrignoIMSensor%1$d_Acc%1$d_Z_IM__g_', sensorID))(range) ...
% ), title('Accelerometer');

switch dataToUse
    case 2
        dataID = gyroID;
        plotTitle = 'Gyroscope';
        lim = 300;
    otherwise
        dataID = accelID;
        plotTitle = 'Accelerometer';
        lim = 4;
end

switch plotMode
    case '2d'
        increment = 1;
    otherwise
        increment = 2;
end

fieldX = sprintf(dataID, sensorID, 'X');
fieldY = sprintf(dataID, sensorID, 'Y');
fieldZ = sprintf(dataID, sensorID, 'Z');

frame = readFrame(v);
% Try to align the video to the start of the IMU data...
while v.CurrentTime < vidStartTime
    frame = readFrame(v);
end
vidNOffset = 0;
while Tvid(vidNOffset + 1) < v.CurrentTime
    vidNOffset = vidNOffset + 1;
end
imuNOffset = 0;
while Timu(imuNOffset + 1) < imuStartTime
    imuNOffset = imuNOffset + 1;
end

% Number of samples by which to gaze into the future.
lookahead = 50;

figure('Position', [100, 100, 1500, 640]);

for n=1:length(Nimu)-lookahead
    while Tvid(n + vidNOffset) > v.CurrentTime
        frame = readFrame(v);
    end
    
    % Get range of indices to plot.
    nRange = n + imuNOffset - lookahead:n + imuNOffset + lookahead;
    % Get corresponding times.
    times = Timu(nRange);
    % Get the range of times.
    tRange = [times(1), times(end)];
    
    % Draw the current video frame.
    subplot(131), ...
        imshow(frame), ...
        title(sprintf("t = %f", v.CurrentTime - (vidStartTime - imuStartTime)));
    
    % Plot a frame of gyroscope Y against time
    subplot(132), ...
        plot( ...
            Timu(nRange), ...
            T.(gyroY)(Nimu(nRange)) ...
        ), ...
        % Also plot a marker at the current time
        hold on, ...
        plot(...
            Timu(n + imuNOffset), ...
            T.(gyroY)(Nimu(n + imuNOffset)), ...
            'k-o', ...
            'LineWidth', 2, ...
            'MarkerSize', 10 ...
        ), ...
        hold off, ...
        grid on, ...
        title(sprintf("Gyro Y t=%f s", Timu(n + imuNOffset))), ...
        ylim([-200, 200]), xlim(tRange);
    
    % Plot a frame of accelerometer Y against time
    subplot(133), ...
        plot( ...
            Timu(nRange), ...
            T.(accelY)(Nimu(nRange)) ...
        ), ...
        hold on, ...
        plot(...
            Timu(n + imuNOffset), ...
            T.(accelY)(Nimu(n + imuNOffset)), ...
            'k-o', ...
            'LineWidth', 2, ...
            'MarkerSize', 10 ...
        ), ...
        hold off, ...
        grid on, ...
        title(sprintf("Accel Y t=%f s", Timu(n + imuNOffset))), ...
        ylim([-4, 4]), xlim(tRange);
    

    
%     subplot(132), ...
%         plot(...
%             T.(fieldY)(Nimu(n + imuNOffset)), ...
%             'k-o', ...
%             'LineWidth', 2, ...
%             'MarkerSize', 10 ...
%         ), ...
%         title(sprintf("%s %s t=%f s", plotTitle, axisToUse, Timu(n + imuNOffset))), ...
%         ylim([-lim, lim]);
        
%     subplot(133), ...
%         plot3(...
%             T.(fieldX)(n + imuNOffset), ...
%             T.(fieldY)(n + imuNOffset), ...
%             T.(fieldZ)(n + imuNOffset), ...
%             'k-o', ...
%             'LineWidth', 2, ...
%             'MarkerSize', 10 ...
%         ), ...
%         xlim([-lim, lim]), ylim([-lim, lim]), zlim([-lim, lim]),...
%         xlabel('X'), ylabel('Y'), zlabel('Z'), ...
%         title(sprintf("%s t=%f s", plotTitle, Timu(n + imuNOffset))), ...
% %         view(90, 0);
%         view(45 + n/10, 30);
    

    drawnow;
end

% for i=1:increment:length(T.(sprintf('TrignoIMSensor%1$d_Acc%1$d_X_IM__g_', sensorID)))
%     range = i:i+increment;
%     switch plotMode
%         case '2d'
%             subplot(131), ...
%                 plot(...
%                     T.(sprintf(dataID, sensorID, 'X'))(i), ...
%                     'k-o', ...
%                     'LineWidth', 2, ...
%                     'MarkerSize', 10 ...
%                     ), ...
%                     title('X'), ...
%                     xlim([-lim, lim]), ylim([-lim, lim]);
%             subplot(132), ...
%                 plot(...
%                     T.(sprintf(dataID, sensorID, 'Y'))(i), ...
%                     'k-o', ...
%                     'LineWidth', 2, ...
%                     'MarkerSize', 10 ...
%                     ), ...
%                     title('Y'), ...
%                     xlim([-lim, lim]), ylim([-lim, lim]);
%             subplot(133), ...
%                 plot(...
%                     T.(sprintf(dataID, sensorID, 'Z'))(i), ...
%                     'k-o', ...
%                     'LineWidth', 2, ...
%                     'MarkerSize', 10 ...
%                     ), ...
%                     title('Z'), ...
%                     xlim([-lim, lim]), ylim([-lim, lim]);
%             sgtitle(sprintf("%s t=%f s", plotTitle, i*imuSamplePeriod));
%         otherwise
%             plot3(...
%                 mean(T.(sprintf(dataID, sensorID, 'X'))(range)), ...
%                 mean(T.(sprintf(dataID, sensorID, 'Y'))(range)), ...
%                 mean(T.(sprintf(dataID, sensorID, 'Z'))(range)), ...
%                 'k-o', ...
%                 'LineWidth', 2, ...
%                 'MarkerSize', 10 ...
%             ), ...
%             xlim([-lim, lim]), ylim([-lim, lim]), zlim([-lim, lim]),...
%             xlabel('X'), ylabel('Y'), zlabel('Z'), ...
% %             sgtitle(plotTitle), ...
%             title(sprintf("%s t=%f s", plotTitle, i*imuSamplePeriod)), ...
%             view(90, 90);
% %             view(45 + i/10, 30);
%     end
%     
%     drawnow;
% end

% Plot accelerometer data against time
dAcc = [...
    rmmissing(T.(sprintf('TrignoIMSensor%1$d_Acc%1$d_X_IM__g_', sensorID))), ...
    rmmissing(T.(sprintf('TrignoIMSensor%1$d_Acc%1$d_Y_IM__g_', sensorID))), ...
    rmmissing(T.(sprintf('TrignoIMSensor%1$d_Acc%1$d_Z_IM__g_', sensorID))) ...
];
figure;
plot(imuTvec, dAcc), ...
    xlabel('Time (s)'), ...
    title('Accelerometer'), ...
    legend('x (lateral)', 'y (vertical)', 'z (anterior-posterior)');

% Plot gyroscope data against time
dGyro = [...
    rmmissing(T.(sprintf('TrignoIMSensor%1$d_Gyro%1$d_X_IM__deg_sec_', sensorID))), ...
    rmmissing(T.(sprintf('TrignoIMSensor%1$d_Gyro%1$d_Y_IM__deg_sec_', sensorID))), ...
    rmmissing(T.(sprintf('TrignoIMSensor%1$d_Gyro%1$d_Z_IM__deg_sec_', sensorID))) ...
];
figure;
plot(imuTvec, dGyro), ...
    xlabel('Time (s)'), ...
    title('Gyroscope'), ...
    legend('x (pitch)', 'y (yaw)', 'z (roll)');

% figure;
% plot(...
%     T.X_samples__7, T.(sprintf('TrignoIMSensor%1$d_Mag%1$d_X_IM__uTesla_', sensorID)), ...
%     T.X_samples__8, T.(sprintf('TrignoIMSensor%1$d_Mag%1$d_Y_IM__uTesla_', sensorID)), ...
%     T.X_samples__9, T.(sprintf('TrignoIMSensor%1$d_Mag%1$d_Z_IM__uTesla_', sensorID)) ...
% ), title('Magnetometer');